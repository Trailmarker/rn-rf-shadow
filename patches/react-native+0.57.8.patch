diff --git a/node_modules/react-native/local-cli/runIOS/findMatchingSimulator.js b/node_modules/react-native/local-cli/runIOS/findMatchingSimulator.js
index 1928d6f..afc44d1 100644
--- a/node_modules/react-native/local-cli/runIOS/findMatchingSimulator.js
+++ b/node_modules/react-native/local-cli/runIOS/findMatchingSimulator.js
@@ -10,48 +10,33 @@
 'use strict';
 
 /**
- * Takes in a parsed simulator list and a desired name, and returns an object with the matching simulator. The desired
- * name can optionally include the iOS version in between parenthesis after the device name. Ex: "iPhone 6 (9.2)" in
- * which case it'll attempt to find a simulator with the exact version specified.
+ * Takes in a parsed simulator list and a desired name, and returns an object with the matching simulator.
  *
- * If the simulatorString argument is null, we'll go into default mode and return the currently booted simulator, or if
+ * If the simulatorName argument is null, we'll go into default mode and return the currently booted simulator, or if
  * none is booted, it will be the first in the list.
  *
  * @param Object simulators a parsed list from `xcrun simctl list --json devices` command
- * @param String|null simulatorString the string with the name of desired simulator. If null, it will use the currently
+ * @param String|null simulatorName the string with the name of desired simulator. If null, it will use the currently
  *        booted simulator, or if none are booted, the first in the list.
  * @returns {Object} {udid, name, version}
  */
-function findMatchingSimulator(simulators, simulatorString) {
+function findMatchingSimulator(simulators, simulatorName) {
   if (!simulators.devices) {
     return null;
   }
   const devices = simulators.devices;
-
-  const parsedSimulatorName = simulatorString ? simulatorString.match(/(.*)? (?:\((.*)?\))?/) : [];
-  if (parsedSimulatorName[2] !== undefined) {
-    var simulatorVersion = parsedSimulatorName[2];
-    var simulatorName = parsedSimulatorName[1];
-  } else {
-    simulatorName = simulatorString;
-  }
-
   var match;
   for (let version in devices) {
     // Making sure the version of the simulator is an iOS or tvOS (Removes Apple Watch, etc)
-    if (!version.startsWith('iOS') && !version.startsWith('tvOS')) {
-      continue;
-    }
-    if (simulatorVersion && !version.endsWith(simulatorVersion)) {
+
+    // if (!version.startsWith('iOS') && !version.startsWith('tvOS')) {
+    if (!version.startsWith('com.apple.CoreSimulator.SimRuntime.iOS') && !version.startsWith('com.apple.CoreSimulator.SimRuntime.tvOS')) {
       continue;
     }
     for (let i in devices[version]) {
       let simulator = devices[version][i];
       // Skipping non-available simulator
-      if (
-        simulator.availability !== '(available)' &&
-        simulator.isAvailable !== 'YES'
-      ) {
+      if (simulator.availability !== '(available)') {
         continue;
       }
       let booted = simulator.state === 'Booted';
